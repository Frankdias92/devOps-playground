# Workflow name and triggers
name: CI
on:
  push:
    branches:
      - ci-cd
  workflow_dispatch:  # Allows manual trigger of the workflow

# Define required permissions for the workflow
permissions:
  id-token: write    # Required for AWS authentication
  contents: write    # Required for semantic release
  issues: write      # Required for semantic release to create issues

jobs:
  build:
    name: 'Build and Push'
    runs-on: ubuntu-latest
    timeout-minutes: 30    # Prevents workflow from running indefinitely
    
    strategy:
      fail-fast: true     # Cancels all in-progress jobs if any job fails
      matrix:
        node: [ 20 ]      # Define Node.js version
    
    steps:
    - uses: actions/checkout@v4    # Checkout repository code
    
    # Setup Node.js environment with cache
    - name: Setup node | ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }} 
        cache: 'yarn'     # Enable caching for yarn dependencies
        cache-dependency-path: ci-cd/api/yarn.lock 
    
    - name: Change directory to project
      run: cd ci-cd/api
    
    # Install dependencies and run tests
    - name: Install depedencies
      run: yarn install
      working-directory: ci-cd/api

    - name: Run tests
      run: yarn test
      working-directory: ci-cd/api
    
    # Security scanning for vulnerabilities
    # - name: Security scan
    #   uses: snyk/actions/node@master
    #   env:
    #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #       args: ci-cd/api

    # Create semantic release for version management
    - name: Semantic release
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
          args: ci-cd/api
    
    # Generate short SHA for Docker image tagging
    - name: Generate tag
      id: generate_tag 
      run: |
        SHA=$(echo $GITHUB_SHA | head -c7)
        echo "sha=$SHA" >> $GITHUB_OUTPUT
    
    # Cache Docker layers to speed up builds
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    # Configure AWS credentials for ECR access
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_LOGIN_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    # Login to Amazon ECR
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    # Build and push Docker image with multiple tags
    - name: Build and push
      id: build-docker-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        SHA_TAG: ${{ steps.generate_tag.outputs.sha }}
        BRANCH_TAG: ${{ github.ref_name }}
      run: |
        docker build -t $REGISTRY/franklin-ci:$SHA_TAG -t $REGISTRY/franklin-ci:$BRANCH_TAG -t $REGISTRY/franklin-ci:latest .
        docker push --all-tags $REGISTRY/franklin-ci
        IMAGE=$(echo $REGISTRY/franklin-ci:$SHA_TAG)
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
    
    # Deploy to AWS App Runner service
    - name: Deploy to app runner
      id: deploy-app-runner
      uses: awslabs/amazon-app-runner-deploy@main
      with:
        service: ${{ vars.SERVICE_NAME }}
        image: ${{ steps.build-docker-image.outputs.image }}
        access-role-arn: ${{ secrets.AWS_APP_RUNNER_ROLE }}
        region: ${{ secrets.AWS_REGION }}
        cpu: 1              # CPU units allocated to the service
        memory: 2           # Memory in GB allocated to the service
        port: 3000         # Port that the application listens on
        wait-for-service-stability-seconds: 180  # Maximum time to wait for service to stabilize
    
    # Verify App Runner deployment
    - name: App Runner check
      run: echo "App Runner running... ${{ steps.deploy-app-runner.outputs.service-url }}"